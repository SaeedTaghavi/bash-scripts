#!/bin/bash

# --- Simple Directory Backup Script ---
# This script backs up a specified directory to a gzipped tar archive (.tar.gz).
# The archive file will be named after the directory, followed by a timestamp.

# --- Configuration ---
# You can change the compression type here if needed.
# For .tar.gz (gzip compression): -czf
# For .tar.bz2 (bzip2 compression): -cjf
# For .tar.xz (xz compression): -cJf
COMPRESSION_FLAGS="-czf"

# --- Script Logic ---

# 1. Check if a directory path is provided as an argument.
if [ -z "$1" ]; then
    echo "Usage: $0 <directory_to_backup>"
    echo "Example: $0 /home/user/documents"
    exit 1 # Exit with an error code if no argument is given
fi

# 2. Store the provided directory path.
DIR_TO_BACKUP="$1"

# 3. Check if the provided path is a valid directory.
if [ ! -d "$DIR_TO_BACKUP" ]; then
    echo "Error: Directory '$DIR_TO_BACKUP' not found or is not a directory."
    exit 1 # Exit with an error code if the directory doesn't exist
fi

# 4. Generate a timestamp for the archive filename.
# Format: YYYYMMDD_HHMMSS (e.g., 20250804_181530)
TIMESTAMP=$(date +"%Y%m%d_%H%M%S")

# 5. Extract the base name of the directory to use in the archive filename.
# For example, if DIR_TO_BACKUP is /home/user/my_project, BASE_DIR_NAME will be my_project.
BASE_DIR_NAME=$(basename "$DIR_TO_BACKUP")

# 6. Construct the full archive filename.
# Example: my_project_20250804_181530.tar.gz
ARCHIVE_NAME="${BASE_DIR_NAME}_${TIMESTAMP}.tar.gz"

# 7. Perform the backup using 'tar'.
echo "--- Starting backup ---"
echo "Source directory: '$DIR_TO_BACKUP'"
echo "Destination archive: '$ARCHIVE_NAME'"

tar ${COMPRESSION_FLAGS} "$ARCHIVE_NAME" "$DIR_TO_BACKUP"

# 8. Check the exit status of the 'tar' command to see if it was successful.
if [ $? -eq 0 ]; then
    echo "--- Backup successful! ---"
    echo "Archive created: '$ARCHIVE_NAME'"
else
    echo "--- Backup failed! ---"
    echo "An error occurred during the backup process."
    exit 1 # Exit with an error code if tar failed
fi
